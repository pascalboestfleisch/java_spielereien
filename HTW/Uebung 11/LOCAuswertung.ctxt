#BlueJ class context
comment0.target=LOCAuswertung
comment0.text=\r\n\ Beschreiben\ Sie\ hier\ die\ Klasse\ LOCAuswertung.\r\n\ \r\n\ @author\ pascal\ boestfleisch,\ emma\ ebel\ \r\n\ @version\ Uebung\ 11\r\n
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment1.text=\r\n\ Aufbau\ eines\ eigenen\ cat-Kommandos.\ Der\ Name\ der\ Datei\ wird\ als\ Kommandozeilenparameter\ uebergeben.\r\n
comment2.params=filename
comment2.target=LOCAuswertung(java.lang.String)
comment2.text=\r\n\ Konstruktor\ gibt\ das\ Arbeitsverzeichnis\ aus\ und\ erzeugt\ ein\ file-Objekt\ \r\n\ @param\ filename\ Ist\ der\ Name\ der\ Datei,\ welche\ auf\ ihre\ LOC\ ueberprueft\ werden\ soll\r\n
comment3.params=
comment3.target=java.lang.String\ getFileName()
comment3.text=\r\n\ Methode\ um\ den\ Namen\ der\ aktuellen\ Datei\ zu\ ermitteln\r\n\ @return\ gibt\ den\ Namen\ der\ Datei\ wieder\r\n
comment4.params=
comment4.target=void\ validiereFiles()
comment4.text=\r\n\ Methode\ zur\ Validierung\ der\ file-Objekte.\ Ueberprueft\ ob\ die\ file-Objekte\ existieren\ und\ lesbar\ sind\r\n
comment5.params=
comment5.target=int\ lineCount()
comment5.text=\r\n\ Liest\ die\ file-Objekte\ ein\ und\ gibt\ die\ Anzahl\ der\ Zeilen\ von\ Code\ an\r\n\ Ignoriert\ leere\ Zeilen,\ Zeilen\ die\ mit\ "/"\ beginnen\ und\ Zeilen\ die\ mit\ "*"\ beginnt\r\n
comment6.params=
comment6.target=void\ ls()
comment6.text=\r\n\ Wird\ fuer\ das\ eigene\ cat-Kommando\ benoetigt\r\n\ Gibt\ ein\ Array\ mit\ allen\ Daten\ im\ Verzeichnis\ zurueck\r\n
comment7.params=
comment7.target=void\ cat()
comment7.text=\r\n\ Wird\ fuer\ das\ eigene\ cat-Kommando\ benoetigt\r\n\ In\ dieser\ Methode\ wird\ die\ Datei\ eingelesen\r\n
comment8.params=
comment8.target=void\ view()
comment8.text=\r\n\ Wird\ fuer\ das\ eigene\ cat-Kommando\ benoetigt\r\n\ Wenn\ ein\ Verzeichnisname\ angegeben\ wird,\ wird\ der\ Verzeichnisinhalt\ ausgegeben\r\n
numComments=9
